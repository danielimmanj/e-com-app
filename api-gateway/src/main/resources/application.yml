server:
  port: 8082 # API Gateway port

spring:
  application:
    name: api-gateway
  main:
    allow-bean-definition-overriding: true
    web-application-type: reactive
  security:
    oauth2:
      client:
        registration:
          spring-with-test-scope:
            provider: keycloak
            client-id: frontend
            client-secret: MY8wq06Es6rsW7pnUYta7dtcbeQsDp8q
            authorization-grant-type: authorization_code
            scope: openid
          keycloak:
            realm: e-commerce
            auth-server-url: http://localhost:8081/realms/e-commerce/protocol/openid-connect
            client-id: frontend
            client-secret: MY8wq06Es6rsW7pnUYta7dtcbeQsDp8q
            authorization-grant-type: client_credentials
            scope: openid
        provider:
          keycloak:
            issuer-uri: http://localhost:8081/realms/e-commerce
      resourceserver:
        jwt:
          issuer-uri: http://localhost:8081/realms/e-commerce # Keycloak Realm URL
          jwk-set-uri: http://localhost:8081/realms/e-commerce/protocol/openid-connect/certs

  cloud:
    gateway:
      globalcors:
        corsConfigurations:
          '[/**]':
            allowedOrigins: "http://localhost:4200"
            allowedMethods: "*"
            allowedHeaders: "*"
#      default-filters:
#        - TokenRelay # Ensure the access token is relayed to backend services
      routes:
#        # Allow unauthenticated access to specific routes for registration and login
#        - id: user-service-register
#          uri: lb://USER-SERVICE
#          predicates:
#            - Path=/users/register
#          filters:
#            - name: CircuitBreaker
#              args:
#                name: userServiceRegisterCircuitBreaker
#                fallbackUri: forward:/fallback/user-service-register
#
#        - id: security-service-login
#          uri: lb://SECURITY-SERVICE
#          predicates:
#            - Path=/security/login
#          filters:
#            - name: CircuitBreaker
#              args:
#                name: securityServiceLoginCircuitBreaker
#                fallbackUri: forward:/fallback/security-service-login

        # Route for Security Service
        - id: security-service
          uri: lb://SECURITY-SERVICE
          predicates:
            - Path=/security/**
          filters:
            - name: CircuitBreaker
              args:
                name: securityServiceCircuitBreaker
                fallbackUri: forward:/fallback/security-service

        # Route for User Service
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/users/**
          filters:
            - name: CircuitBreaker
              args:
                name: userServiceCircuitBreaker
                fallbackUri: forward:/fallback/user-service

        # Route for Order Service
        - id: order-service
          uri: lb://ORDER-SERVICE
          predicates:
            - Path=/orders/**
          filters:
            - name: CircuitBreaker
              args:
                name: orderServiceCircuitBreaker
                fallbackUri: forward:/fallback/order-service

        # Route for Inventory Service
        - id: inventory-service
          uri: lb://INVENTORY-SERVICE
          predicates:
            - Path=/inventory/**
          filters:
            - name: CircuitBreaker
              args:
                name: inventoryServiceCircuitBreaker
                fallbackUri: forward:/fallback/inventory-service

        # Route for Product Service
        - id: product-service
          uri: lb://PRODUCT-SERVICE
          predicates:
            - Path=/products/**, /categories/**
          filters:
            - name: CircuitBreaker
              args:
                name: productServiceCircuitBreaker
                fallbackUri: forward:/fallback/product-service

        # Route for Shipping Service
        - id: shipping-service
          uri: lb://SHIPPING-SERVICE
          predicates:
            - Path=/shipping/**
          filters:
            - name: CircuitBreaker
              args:
                name: shippingServiceCircuitBreaker
                fallbackUri: forward:/fallback/shipping-service

        # Route for Payment Service
        - id: payment-service
          uri: lb://PAYMENT-SERVICE
          predicates:
            - Path=/payments/**
          filters:
            - name: CircuitBreaker
              args:
                name: paymentServiceCircuitBreaker
                fallbackUri: forward:/fallback/payment-service

  resilience4j:
    circuitbreaker:
      instances:
        securityServiceCircuitBreaker:
          sliding-window-size: 10
          minimum-number-of-calls: 5
          failure-rate-threshold: 50
          wait-duration-in-open-state: 10000

        userServiceCircuitBreaker:
          sliding-window-size: 10
          minimum-number-of-calls: 5
          failure-rate-threshold: 50
          wait-duration-in-open-state: 10000

        orderServiceCircuitBreaker:
          sliding-window-size: 10
          minimum-number-of-calls: 5
          failure-rate-threshold: 50
          wait-duration-in-open-state: 10000

        inventoryServiceCircuitBreaker:
          sliding-window-size: 10
          minimum-number-of-calls: 5
          failure-rate-threshold: 50
          wait-duration-in-open-state: 10000

        productServiceCircuitBreaker:
          sliding-window-size: 10
          minimum-number-of-calls: 5
          failure-rate-threshold: 50
          wait-duration-in-open-state: 10000

        shippingServiceCircuitBreaker:
          sliding-window-size: 10
          minimum-number-of-calls: 5
          failure-rate-threshold: 50
          wait-duration-in-open-state: 10000

        paymentServiceCircuitBreaker:
          sliding-window-size: 10
          minimum-number-of-calls: 5
          failure-rate-threshold: 50
          wait-duration-in-open-state: 10000

  cors: # CORS configuration
    allowed-origins: "http://localhost:4200" # Adjust according to your frontend
    allowed-methods: "*"
    allowed-headers: "*"

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
    fetch-registry: true
    register-with-eureka: true
  instance:
    prefer-ip-address: true

resilience4j:
  circuitbreaker:
    instances:
      apiGateway:
        registerHealthIndicator: true
        slidingWindowSize: 10
        failureRateThreshold: 50
        waitDurationInOpenState: 10000 # 10 seconds
        permittedNumberOfCallsInHalfOpenState: 3
        slidingWindowType: COUNT_BASED
        minimumNumberOfCalls: 5
        automaticTransitionFromOpenToHalfOpenEnabled: true

management:
  endpoints:
    web:
      exposure:
        include: health,metrics,circuitbreakers,prometheus